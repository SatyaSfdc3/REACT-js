// Start - Day 1

// Creating a variable
// Syntax
var variableName = defaultValue;

var x = 10;

Viewing the values inside a variable
// Approach 1
console.log(x); => It prints value to console
// Approach 2
alert(x); => It displays value in alert box

var y;
console.log(y) => it prints undefined
y = 20;

function
	Block of code 
	Code is added for reusability and easy to distribute

// Approach 1 for Creating a function 
// Syntax 
function functionName(arguments) { 
	// return statement if needed.
}

function printWelcome(){
	console.log('Welcome to Demo');
}

// Executing a function
// Syntax
functionName(parameters);

printWelcome(); => prints Welcome to Demo to the console.

function addition(x, y){
	var z = x + y;
	return z;
}
addition(1, 2) => 3
addition(1) => NaN

NaN => Not a number

1 + undefined => NaN
1 - undefined => NaN
1 / undefined => NaN
1 * undefined => NaN

var a;
var b;
var c;

var d = a || b || c || 40;
d => 40 

c = 30;
d = a || b || c || 40;
d => 30

b = 20;
d = a || b || c || 40;
d => 20;

a = 10;
d = a || b || c || 40;
d => 10;

function subtraction(x, y) {
	// x, y are like arguments
	x = x || 0;
	y = y || 0;
	console.log('x value is ' + x );
	console.log('y value is ' + y );
	var z = x - y;
	return z;
}
subtraction(10, 8) => 2
subtraction(10) => 10
subtraction() => 0
subtraction(10, 8, 2) => 2

Additional Params will be ignore 
10 is copied to x, 8 is copied to y and 2 is ignored.
Passing less Params will be considered as undefined in arguments.

typeof => internal function present in browsers
	It returns type of value
	
Types
	String => typeof("Karthik")
	Number => typeof(10)
	Boolean => typeof(true)
	Undefined => typeof(m) => var m;
	Function => typeof(multiplication)

// Approach 2 for Creating a function 
// Syntax 
var functionName = function (arguments) { 
	// return statement if needed.
}
var multiplication = function(x, y){
	var z = x * y;
	return z;
}

var variableName 
	=> value
	   function
	
// Self Executing function
	Function is created and executed 
	After execution, memory allocated for function is also cleared.
	Can return a value ie result
	
// Syntax
(function functionName(){})();

(function printWelcome(){ 
	console.log('Welcome to Demo');
})();

(function add(x, y){ 
	var z = x + y;
	return z;
})(10, 2, 5);

var result = (function add(x, y){ 
	var z = x + y;
	return z;
})(10, 2, 5);

conditional Operator
var variableName = condition ? value1 : value2;
	if condition is true
	variableName = value1
	else 
	variableName = value2

var z = 5 > 8 ? 10 : 2;
z => 2

1 == "1" => true
1 === "1" => false

== compares only value
=== compares both value and type

http://github.com/mkrishna2025/REACT_003

// End - Day 1

// Start - Day 2
Object
	Its a key value pair
	key - String => can access using . or []
	      Number => can access using []
		  symbols like _ is allowed => var person5 = { first_name: 'Karthik' }
	value -
			Primitive - string
						number
						boolean
			function
			Object
						
		  
	
var person = {
	firstName: 'Arjun',
	lastName: 'Krishna'
}

// Accessing Values
person.firstName
person['lastName']

// Adding/Updating a key value
person.age = 20;
person['city'] = 'Hyderabad';

// Deleting a key
delete person.city
delete person['age']

// Object as a value
person.address = {
	line1: 'Kukatpally',
	line2: 'Hyderabad'
}

To print Kukatpally
person.address.line1
person.address['line1']
person['address']['line1']

var calculator = {
	addition: function(x, y) {
		return x + y;
	},
	subtraction: function(x, y) {
		x = x || 0;
		y = y || 0;
		return x - y;
	}
}

calculator.multiplication = function(x, y){
	return x * y;
}
calculator.multiplication( 10, 2) => 20


// Arrays
var students = ['Krishna', 'Neha', 'Karthik'];

// Adding item to array.
students.push('Venkat');
students.push('Kumar');

// Printing Values
// Approach 1
console.log(students[0]);
console.log(students[1]);
console.log(students[2]);
console.log(students[3]);
console.log(students[4]);
console.log(students[5]); => will return undefined instead of exception.

// Approach 2
using for 
for(var index = 0; index < students.length; index ++ ){
	console.log(index);
	var student = students[index];
	console.log(student);
}

// Approach 3
using for in => Iteration is done for index
for(var index in students) {
	console.log(index);
	var student = students[index];
	console.log(student);
}

// Approach 4
using for of => Iteration is done for items
for(var student of students) {
	console.log(student);
}

// Last element is copied to variable and then deleted in that array.
var lastElement = students.pop();

https://www.w3schools.com/js/js_array_methods.asp


// Array of different elements
var diff = [1, "Karthik", true, function(x, y) { return x + y; } ]

diff[3] => return f ie function
diff[3](1, 2)

-- End - Day 2

-- Start - Day 3

Helper Methods for conversion

parseInt => converts string to number => it removes decimals rather round off
parseFloat => string to float
toString => number to string.
(1).toString() => use () if it is a value
var a = 10;
a.toString()

// Creating users(object)

// User 1
var lakshman = {
	getName: function(){
		return "Lakshman Reddy";
	},
	getAge: function(){
		return 10;
	} 
}

// User 2
var neha = {
	getName: function(){
		return "Neha Singh";
	},
	getAge: function(){
		return 20;
	} 
}
printing to console => 
console.log(neha.getName() + " has age " + neha.getAge()) 

Class
	Structure and has no physical values
	
	Data Hiding
	Code Redundancy
	Inheritance
	Constructors => Passing values while creating an instance.

Object/Instance =>
	It is physical example of a Class. 
	Methods/Fields override in one instance will not affect other instances.
	
// Approach 1 for Creating a class
// Syntax
var className = function() {
	// private fields/methods
	// global fields/methods
	
	return {
		// public fields/methods
	}
}

OR 

function className() {
	// private fields/methods
	// global fields/methods
	
	return {
		// public fields/methods
	}
}

private => can be accessed with in a class
public => can be accessed with in a class and for instance(object)
global => can be accessed directly and no need of any instance


var TestClass = function(){
	return {
		printWelcome: function(){
			console.log('Welcome to Demo');
		}
	}
}

// Creating Instances
var t1 = new TestClass();
var t2 = new TestClass();
var t3 = new TestClass();

t1.printWelcome() => Welcome to Demo

// Overiding Instance method => wont affect other instances like t1 and t3.

t2.printWelcome = function(){
	console.log('Welcome to Overided Demo');
}
t2.printWelcome() => Welcome to Overided Demo

t3.printWelcome(); => Welcome to Demo

Field/Member/Property
Function/Method/API

// Example for Constructor
var Person = function(firstName, lastName, age) {
	return {
		getFullName: function(){
			return firstName + ' ' + lastName;
		},
		getAge: function(){
			return age;
		}
	}
}

var lakshman = new Person('Lakshman', 'Reddy', 10);
var neha = new Person('Neha', 'Singh', 20);
neha.getFullName() => Neha Singh


String Cases
	Camel Case => first letter will be small => studentInfo => functions
	Variable Case => first letter will be upper case => StudentInfo => Class
	Lower Case => all letters will be in lower case => studentinfo
	Upper Case => all letters will be in Upper case => STUDENTINFO
	
	
var Calculator = function(secretCode){
	var print = function(result){
		console.log('Result is ' + result);
	}
	
	var secret = secretCode;
	
	return {
		version: 1.0,
		add: function(x, y) {
			var z = x + y;
			print(z);
			console.log(secret);
			return z;
		}
	}
}

// End - Day 3

// Start - Day 4
var Calculator = function(secretCode){
	// private method
	var print = function(result){
		console.log('Result is ' + result);
	}
	
	// private variable
	var secret = secretCode;
	
	// global variable
	pi = 3.14;
	
	// global method
	getBrowser = function (){
    	return "Chrome";
	}
	
	// public methods/variables
	return {
		version: 1.0,
		add: function(x, y) {
			var z = x + y;
			print(z);
			console.log(secret);
			return z;
		}
	}
}

// Passing Object to function as a single input instead of multiple inputs
function getFullName(fn, ln, age, city) {
	fn = fn || '';
	ln = ln || '';
	age = age || 0;
	city = city || '';
	return fn + ln + ", " + age + "," + city;
}
// Disadvantages
	We must pass all params if I want to pass City
	Order should be same 

function getFullName(options){
	return options.fn + options.ln + ", " + options.age + "," + options.city;
}

// After undefined handling
function getFullName(options){
	options = options || {};
	options.fn = options.fn || '';
	options.ln = options.ln || '';
	options.age = options.age || '';
	options.city = options.city || '';
	return options.fn + options.ln + ", " + options.age + "," + options.city;
}

getFullName({ ln: 'Kumar', age: 20}) => kumar, 20, 

// Passing Object to function as a single input instead of multiple inputs
function Student(fn, ln, age, city) {
	return {
    	getFullName: function(){
        	return fn + ln + ", " + age + "," + city;
		}
	}
}

// Passing Object to constructor 
function Student(options) {
	options = options || {};
	options.fn = options.fn || '';
	options.ln = options.ln || '';
	options.age = options.age || '';
	options.city = options.city || '';
	
	return {
    	getFullName: function(){
        	return options.fn + options.ln + ", " + options.age + "," + options.city;
		}
	}
}

var kranthi = new Student({ ln: 'Kranthi', age: 30});
kranthi.getFullName() => Kranthi, 30,


function Login(options) {
	options = options || {};
	options.userName = options.userName || 'Guest User';
	options.country = options.country || 'India';
	
	return {
    	getUserInfo: function(){
        	return options.userName + ", " + options.country;
		}
	}
}
var demoLogin = new Login();
demoLogin.getUserInfo() => "Guest User, India"

var person = { fn: 'Arjun', ln: 'Kumar'};

// converting object to string => In Most cases, string format is used to send to backend.

var str = JSON.stringify(person);
str => "{"fn":"Arjun","ln":"Kumar"}"

// converting string to object => In Most cases, backend gives string format which cant be used to print values.. there we need to convert into object.
JSON.parse(str);

sample source might be
var JSON = {
	parse: function(str){},
	stringify: function(object) {}
}

// End - Day 4

// Start - Day 5

// Approach 2 for creating a class
// Syntax
var className = function() {
	// private fields/methods
	// global fields/methods
	
	// public fields/methods
	this.
}

// this is reference of person. Usually we call it as instance/object scope/context.
var person = {
	name: 'Kalyan',
	getName: function(){
    	return this.name;
	}
}


var Calculator = function(secretCode){
	// private method
	var print = function(result){
		console.log('Result is ' + result);
	}
	
	// private variable
	var secret = secretCode;
	
	// global variable
	pi = 3.14;
	
	// global method
	getBrowser = function (){
    	return "Chrome";
	}
	
	this.version = 1.0;
	this.add = function(x, y) {
		var z = x + y;
		print(z);
		console.log(secret);
		return z;
	}
	
	this.sub = function(x, y) {
		var z = x + y;
		print(z);
		console.log(secret);
		return z;
	}
}

function add(x, y) {
	console.log(x);
	console.log(y);
	return x + y;
}
Executing
// Approach - 1
add(1, 2)

// Approach - 2
functionName( scope, parameters);
add(this, 1, 2 ) => 3


var ScientificCalculator = function(secret){
	Calculator.call(this, secret);
	this.area = function(){
		console.log('Need to Implement');
	}
	this.sub = function() {
		console.log('Function is overided inside child class');
	}
}

Points to Summarize:
1. Controller goes inside method/function only if the instance is created and not on function/class creation.
2. 


Prototype
	Used to inject methods for existing classes.
	Newly injected methods are available for new instances and old instances also.
	
Syntax 
Class.prototype.methodName = function() { .........}

var s1= new ScientificCalculator();
ScientificCalculator.prototype.mul = function(x, y) {
	return x * y;
}
var s2 = new ScientificCalculator();
s2.mul(2, 10) => 20

s1.mul(10, 20) => 200 => mul is accessible even though it is created before adding prototype

// End - Day 5

// Start - Day 6

Events => Capturable things

Dynamic HTML => Rendering HTML Elements Dynamically

Basic Principle of UI Frameworks => Have simple div inside body. When this body is loaded inject HTML elements.


Ext.create('Ext.Button', {
    renderTo: document.body,
    text    : 'Click me',
    scale   : 'large'
});


// Sample source code
var Ext = {
	create: function(type, attributes){
		if(type == 'Ext.Button') {
			var button = document.createElement("input");
			button.setAttribute('type', 'button');
			button.setAttribute('value', attributes.text);
			document.body.appendChild(button);
		}
	}
}


// REACT
React.createElement('h1', 'Welcome to Demo');

var React = {
	createElement: function(type, innerHML) {
		if(type == 'h1') {
			var h1 = document.createElement('h1');
			h1.innerHML = innerHML;
			return h1;
		}
	}
}


