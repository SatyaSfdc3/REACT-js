// Start - Day 1

// Creating a variable
// Syntax
var variableName = defaultValue;

var x = 10;

Viewing the values inside a variable
// Approach 1
console.log(x); => It prints value to console
// Approach 2
alert(x); => It displays value in alert box

var y;
console.log(y) => it prints undefined
y = 20;

function
	Block of code 
	Code is added for reusability and easy to distribute

// Approach 1 for Creating a function 
// Syntax 
function functionName(arguments) { 
	// return statement if needed.
}

function printWelcome(){
	console.log('Welcome to Demo');
}

// Executing a function
// Syntax
functionName(parameters);

printWelcome(); => prints Welcome to Demo to the console.

function addition(x, y){
	var z = x + y;
	return z;
}
addition(1, 2) => 3
addition(1) => NaN

NaN => Not a number

1 + undefined => NaN
1 - undefined => NaN
1 / undefined => NaN
1 * undefined => NaN

var a;
var b;
var c;

var d = a || b || c || 40;
d => 40 

c = 30;
d = a || b || c || 40;
d => 30

b = 20;
d = a || b || c || 40;
d => 20;

a = 10;
d = a || b || c || 40;
d => 10;

function subtraction(x, y) {
	// x, y are like arguments
	x = x || 0;
	y = y || 0;
	console.log('x value is ' + x );
	console.log('y value is ' + y );
	var z = x - y;
	return z;
}
subtraction(10, 8) => 2
subtraction(10) => 10
subtraction() => 0
subtraction(10, 8, 2) => 2

Additional Params will be ignore 
10 is copied to x, 8 is copied to y and 2 is ignored.
Passing less Params will be considered as undefined in arguments.

typeof => internal function present in browsers
	It returns type of value
	
Types
	String => typeof("Karthik")
	Number => typeof(10)
	Boolean => typeof(true)
	Undefined => typeof(m) => var m;
	Function => typeof(multiplication)

// Approach 2 for Creating a function 
// Syntax 
var functionName = function (arguments) { 
	// return statement if needed.
}
var multiplication = function(x, y){
	var z = x * y;
	return z;
}

var variableName 
	=> value
	   function
	
// Self Executing function
	Function is created and executed 
	After execution, memory allocated for function is also cleared.
	Can return a value ie result
	
// Syntax
(function functionName(){})();

(function printWelcome(){ 
	console.log('Welcome to Demo');
})();

(function add(x, y){ 
	var z = x + y;
	return z;
})(10, 2, 5);

var result = (function add(x, y){ 
	var z = x + y;
	return z;
})(10, 2, 5);

conditional Operator
var variableName = condition ? value1 : value2;
	if condition is true
	variableName = value1
	else 
	variableName = value2

var z = 5 > 8 ? 10 : 2;
z => 2

1 == "1" => true
1 === "1" => false

== compares only value
=== compares both value and type

http://github.com/mkrishna2025/REACT_003

// End - Day 1

// Start - Day 2
Object
	Its a key value pair
	key - String => can access using . or []
	      Number => can access using []
		  symbols like _ is allowed => var person5 = { first_name: 'Karthik' }
	value -
			Primitive - string
						number
						boolean
			function
			Object
						
		  
	
var person = {
	firstName: 'Arjun',
	lastName: 'Krishna'
}

// Accessing Values
person.firstName
person['lastName']

// Adding/Updating a key value
person.age = 20;
person['city'] = 'Hyderabad';

// Deleting a key
delete person.city
delete person['age']

// Object as a value
person.address = {
	line1: 'Kukatpally',
	line2: 'Hyderabad'
}

To print Kukatpally
person.address.line1
person.address['line1']
person['address']['line1']

var calculator = {
	addition: function(x, y) {
		return x + y;
	},
	subtraction: function(x, y) {
		x = x || 0;
		y = y || 0;
		return x - y;
	}
}

calculator.multiplication = function(x, y){
	return x * y;
}
calculator.multiplication( 10, 2) => 20


// Arrays
var students = ['Krishna', 'Neha', 'Karthik'];

// Adding item to array.
students.push('Venkat');
students.push('Kumar');

// Printing Values
// Approach 1
console.log(students[0]);
console.log(students[1]);
console.log(students[2]);
console.log(students[3]);
console.log(students[4]);
console.log(students[5]); => will return undefined instead of exception.

// Approach 2
using for 
for(var index = 0; index < students.length; index ++ ){
	console.log(index);
	var student = students[index];
	console.log(student);
}

// Approach 3
using for in => Iteration is done for index
for(var index in students) {
	console.log(index);
	var student = students[index];
	console.log(student);
}

// Approach 4
using for of => Iteration is done for items
for(var student of students) {
	console.log(student);
}

// Last element is copied to variable and then deleted in that array.
var lastElement = students.pop();

https://www.w3schools.com/js/js_array_methods.asp


// Array of different elements
var diff = [1, "Karthik", true, function(x, y) { return x + y; } ]

diff[3] => return f ie function
diff[3](1, 2)











